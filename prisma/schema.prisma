// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model
model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  isPremium           Boolean   @default(false)
  stripeCustomerId    String?   @unique
  stripeSubscriptionId String?
  tokenVersion        Int       @default(1)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
  likedSongs    LikedSong[]
  recentlyPlayed RecentlyPlayed[]
  localSongs    LocalSong[]
}

// Song model
model Song {
  id            String    @id @default(cuid())
  title         String
  artist        String
  album         String?
  duration      String
  source        String    // 'youtube', 'mixcloud', 'local'
  sourceUrl     String
  thumbnail     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  playlists     PlaylistSong[]
  likedBy       LikedSong[]
  recentlyPlayed RecentlyPlayed[]
}

// Playlist model
model Playlist {
  id            String    @id @default(cuid())
  name          String
  description   String?
  thumbnail     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs         PlaylistSong[]

  @@index([userId])
}

// Junction table for Playlist and Song
model PlaylistSong {
  id            String    @id @default(cuid())
  position      Int       // For ordering songs in playlist
  addedAt       DateTime  @default(now())

  // Relations
  playlistId    String
  playlist      Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  songId        String
  song          Song      @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@unique([playlistId, position])
  @@index([playlistId])
  @@index([songId])
}

// Liked Songs
model LikedSong {
  id            String    @id @default(cuid())
  likedAt       DateTime  @default(now())

  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  songId        String
  song          Song      @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([userId])
  @@index([songId])
}

// Recently Played
model RecentlyPlayed {
  id            String    @id @default(cuid())
  playedAt      DateTime  @default(now())

  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  songId        String
  song          Song      @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([songId])
  @@index([playedAt])
}

model LocalSong {
  id        String   @id @default(cuid())
  title     String
  artist    String
  duration  String
  filePath  String
  fileSize  Int
  mimeType  String
  uploadedAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
} 